services:
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: orchestrator
    image: multi-agent-ai:orchestrator
    container_name: multi-agent-orchestrator
    ports:
      - "7500:7500"
    environment:
      - SERVICE_TYPE=orchestrator
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
      - FASTAPI_SERVER_URL=http://server:7000
      - INSURANCE_SERVER_URL=ws://insurance-server:7001
      - MCP_SERVER_URL=http://mcpserver:8333
    depends_on:
      - server
      - insurance-server
      - mcpserver
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7500/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multi-agent-network

  mcpserver:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: mcp-server
    image: multi-agent-ai:mcpserver
    container_name: multi-agent-mcpserver
    ports:
      - "8333:8333"
    environment:
      - SERVICE_TYPE=mcp-server
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
      - MCP_TRANSPORT=http
      - MCP_PORT=8333
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multi-agent-network

  server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: fastapi-server
    image: multi-agent-ai:server
    container_name: multi-agent-server
    ports:
      - "7000:7000"
    environment:
      - SERVICE_TYPE=fastapi-server
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
      - MCP_SERVER_URL=http://mcpserver:8333
    depends_on:
      - mcpserver
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multi-agent-network

  insurance-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: insurance-server
    image: multi-agent-ai:insurance-server
    container_name: multi-agent-insurance-server
    ports:
      - "7001:7001"
    environment:
      - SERVICE_TYPE=insurance-server
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
    volumes:
      - .:/app
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 7001)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multi-agent-network

  webclient:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: web-client
    image: multi-agent-ai:webclient
    container_name: multi-agent-webclient
    ports:
      - "7080:7080"
    environment:
      - SERVICE_TYPE=web-client
      - ORCHESTRATOR_URL=http://orchestrator:7500
    depends_on:
      - orchestrator
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multi-agent-network

networks:
  multi-agent-network:
    driver: bridge